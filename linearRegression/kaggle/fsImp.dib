#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"},{"aliases":[],"languageName":"fsharp","name":"fsharp"}]}}

#!fsharp

#r "nuget:Numpy, 3.11.1.34"

#!fsharp

open System;

#!fsharp

open Numpy;

#!fsharp

let linearRegression = 
    

#!csharp

#r "nuget:Numpy, 3.11.1.34"

#!csharp

fasfas

#!fsharp

#r "nuget: NumpyDotNet, 0.9.86.6"

#!csharp

#r "nuget: NumpyDotNet, 0.9.86.6"

using NumpyDotNet;

ndarray O = np.arange(0, 12, dtype: np.Int32);  // create Int32 ndarray   
ndarray A = (ndarray)O["2:6"];                  // create a view of this middle 4 elements, starting at index 2   
ndarray B = (ndarray)O["2:6"];                  // create a view of this middle 4 elements, starting at index 2   

Int32[] O1 = O.AsInt32Array();                  // Int32[] {0,1,2,3,4,5,6,7,8,9,10,11}  reference to real data   
Int32[] A1 = A.AsInt32Array();                  // Int32[] {2,3,4,5}  The view was copied into a new array.   
Int16[] A2 = A.AsInt16Array();                  // Int16[] {2,3,4,5}  The view was copied into a new array.   

Console.WriteLine(A);
var a = np.sum(A);
Console.WriteLine(a);

double[] vector1 = { 1, 2, 3 };
double[] vector2 = { 3, 4, 5 };
double result = Matrix.Dot(vector1, vector2);

#!fsharp

open NumpyDotNet;
let O = np.arange(0, 12, np.Int32)

#!fsharp

np.arange(0, 12, dtype: np.Int32)["2:6"];
