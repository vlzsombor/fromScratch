#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"},{"aliases":[],"languageName":"fsharp","name":"fsharp"}]}}

#!fsharp

printfn "hello"

#!fsharp

let rec gradientDescent (gamma:float, alpha:float) = 
    let gradient = alpha * (-2.) * (gamma-1000000.)
    if gradient < 0.00001 then
        gamma - gradient
    else
        gradientDescent (gamma-gradient, alpha)

printfn "%A" (gradientDescent (3., 0.1))

#!fsharp

let rec gradientDescent (gamma:float, alpha:float, gradFunc: float -> float) = 
    let gradient = alpha * (2.) * gradFunc gamma
    if gradient < 0.00001 then
        gamma - gradient
    else
        gradientDescent (gamma-gradient, alpha, gradFunc)

let gradientFunc gamma = (-2.0) * (gamma - 1000000.0)

printfn "%A" (gradientDescent (3., 0.1, gradientFunc (x-1.)))

#!fsharp

let rec gradientDescent (gamma: float) (alpha: float) =
    seq {
        let gradient = gamma - alpha * (2.0) * (gamma - 1.0)
        if abs gradient < 0.00001 then
            yield gamma  // Return the last gamma value
        else
            yield gamma
            yield! gradientDescent gamma alpha
    }

// Define the gradient function

// Call the gradient descent function and return a sequence
let flow = gradientDescent 3.0 0.1

// Print the sequence
flow |> Seq.iter (printfn "%A")

#!fsharp

let rec aaa (f: unit -> float) =
    f()

aaa (fun () -> 2.)  // Now passing a function with unit () argument

#!fsharp

let rec gradientDescent (gamma:float, alpha:func??) = 
    let gradient = alpha * 2. * (gamma - 1.)
    if gradient < 0.00001 then
        gamma - gradient
    else
        gradientDescent (gamma-gradient, alpha)


printfn "%A" (gradientDescent (3., 0.1))

#!fsharp

#r "nuget:Numpy --source /Users/zsomborveres-lakos/git/offlinePackage/dotnet/" 

using Numpy;
